/***T
 * The AttackerSim class represents the different portions of attacking in soccer, there is an attacker chosen
 * by the user
 */
public class AttackerSim {

    private String player;

    /***
     * Constructor for the AttackerSim class
     * @param player represents the attacker the user chose
     */
    public AttackerSim(String player){
        this.player = player;
    }

    /***
     * firstBall() method which randomly choses which team will start with the ball
     * @return returns an int representing which team starts with the ball
     */
    public int firstBall(){
        int ballNum = (int)(Math.random()*2)+1;
        return ballNum;
    }

    /***
     * attackOutcome method will create a String that shows whether the attack has been a success
     * @param direction a String representing which way the user wants to dribble towards
     * @return returns a string that represents a positive or negative outcome
     */
    public String attackOutcome(String direction){
        int odds = 0;
        String[] directions = {"right", "left"};
        if (direction.equals(directions[(int) (Math.round(Math.random()))])){
            odds = 3;
        }
        else{odds = 1;}
        int outcomeNum = (int) (Math.random() * (10))+odds;
        int outcomePicker = (int) (Math.round(Math.random()));
        String[] goodOutcomes = {player + " dribbles right past", "INCREDIBLE " + player + " HAS DUSTED"};
        String[] badOutcomes = {"How embarrassing " + player + " has tripped and lost the ball to", "Yikes " + player + " could not win the 1v1 against"};
        if (outcomeNum > 5){
            return goodOutcomes[outcomePicker];
        }
        else{
            return badOutcomes[outcomePicker];
        }
    }

    /***
     * checkOutcome method which compares the user outcome generated by the attackOutcome method
     * to a list of the positive outcome to check if it's equal to any of the items
     * @param outcome a String representing the users outcome from the attackOutcome method
     * @return returns an int which represents if the outcome is positive (1) or negative (0)
     */
    public int checkOutcome(String outcome){
        String[] goodOutcomes = {player + " dribbles right past", "INCREDIBLE " + player + " HAS DUSTED"};
        for (int i = 0; i < goodOutcomes.length; i++){
            if(goodOutcomes[i].equals(outcome)){
                return 1;
            }
        }
        return 0;
    }

    /***
     * pastDefender method which determines if the user's attacker will make it past the opposing defender
     * @param moveNum an int representing what move the user wants to preform
     * @return returns a boolean that represents if the attacker makes it past the defender
     */
    public boolean pastDefender(Integer moveNum){
        int numPicker = (int) (Math.random() * 3)+1;
        return numPicker == moveNum;
    }

    /***
     * goalScored method which determines if a goal is scored based on if the parameter
     * equals the randomly generated numbers
     * @param shootNum an int representing which area of the goal the user wants their attacker to shoot in
     * @return returns a boolean that represents if a goal was scored
     */
    public boolean goalScored(Integer shootNum){
        int success = (int) (Math.random() * 5)+1;
        int success2 = (int) (Math.random() * 5)+1;
        return (shootNum == success) || (shootNum == success2);
    }

    /***
     * toString method which returns a String that contains the information about the users current attacker
     * @return returns a properly formatted String that displays the current players
     */
    public String toString(){
        return "The current attacker is: " + player;
    }



}
